---
title: DNS Queries over HTTPS
abbrev: DNS Queries over HTTPS
docname: draft-ietf-doh-dns-over-https

stand_alone: true

ipr: trust200902
area: Art
kw: Internet-Draft
cat: std

pi:
  toc: yes
  tocdepth: 4
  sortrefs: yes
  symrefs: yes

author:
 -
   ins: P. Hoffman
   name: Paul Hoffman
   org: ICANN
   email: paul.hoffman@icann.org
 -
   ins: P. McManus
   name: Patrick McManus
   org: Mozilla
   email: mcmanus@ducksong.com

normative:
  RFC1035:
  RFC2308:
  RFC4648:
  RFC5246:
  RFC6570:
  RFC7230:
  RFC7231:
  RFC7234:
  RFC7540:
  RFC7541:
  RFC8174:

informative:
  RFC2181:
  RFC5280:
  RFC5861:
  RFC6066:
  RFC6147:
  RFC6891:
  RFC6950:
  RFC6960:
  RFC7719:
  RFC7858:
  CORS:
    title: "Cross-Origin Resource Sharing"
    target: "https://fetch.spec.whatwg.org/#http-cors-protocol"

--- abstract

This document describes how to run DNS service over HTTP using
https:// URIs.

\[\[ There is a repository for this draft at
<https://github.com/dohwg/draft-ietf-doh-dns-over-https> \]\].

--- middle

# Introduction

This document defines a mechanism for sending DNS {{RFC1035}} queries and
getting DNS responses over HTTP {{RFC7540}} using https:// (and therefore TLS
{{RFC5246}} security for integrity and confidentiality), by interacting with a
specified type of HTTP resource ({{resource}}) using the existing DNS wire
format {{dnswire}}. Each DNS query-response pair is mapped into a HTTP
request-response pair.

The described approach is more than a tunnel over HTTP. It establishes
a default media type for DNS requests and responses, but uses
normal HTTP content negotiation mechanisms for selecting alternatives
that endpoints may prefer in anticipation of serving new use cases. In
addition to this media type negotiation, it aligns itself with HTTP
features such as caching, redirection, proxying, authentication, and
compression.

This integration with HTTP provides a resolution service suitable for both
traditional DNS clients and native web applications seeking access to
the DNS.

Two primary uses cases were considered during this protocol's
development. They included preventing on-path devices from interfering
with DNS operations and allowing web applications to access DNS
information via existing browser APIs in a safe way consistent with
Cross Origin Resource Sharing (CORS) {{CORS}}. There are certainly
other uses for this work.

# Terminology

A HTTP resource that supports this protocol is called a "DNS API resource" to
differentiate it from a "DNS server" (one that uses the regular DNS
protocol).  Similarly, a client that supports this protocol is called a
"DNS API client".

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY",
and "OPTIONAL" in this document are to be interpreted as described in
BCP 14, RFC8174 {{RFC8174}} when, and only when, they
appear in all capitals, as shown here.

# Protocol Requirements

The protocol described here bases its design on the following protocol requirements:

* The protocol must use normal HTTP semantics.

* The queries and responses must be able to be flexible enough to express every
  DNS query that would normally be sent in DNS over UDP (including queries and
  responses that use DNS extensions, but not those that require multiple
  responses).

* The protocol must permit the addition of new formats for DNS queries and responses.

* The protocol must ensure interoperability by specifying a single format for
  requests and responses that is mandatory to implement.  That format must be
  able to support future modifications to the DNS protocol including the
  inclusion of one or more EDNS options (including those not yet defined).

* The protocol must use a secure transport that meets the
  requirements for HTTPS.

## Non-requirements

* Supporting network-specific DNS64 {{RFC6147}}

* Supporting other network-specific inferences from plaintext DNS queries

* Supporting insecure HTTP


# Locating DNS API Resources {#locate}

The URI of a DNS API Resource is found through the use of a URI Template
{{RFC6570}}. Configuration and discovery of the URI Template is done out of
band from this protocol.

The URI Template is processed without any variables when the HTTP method is
POST; the DNS request is conveyed in the POST request body, without encoding.

When the HTTP method is GET, the single template variable "dns" is defined as
the content of the request (as described in {{dnswire}}), encoded with
base64url {{RFC4648}}. Padding characters for base64url MUST NOT be included.

Future specifications for new media types MUST define the variables used for
URI Template processing with this protocol.


# DNS API Resources {#resource}

DNS API resources accept both POST and GET requests, containing a single DNS
request per HTTP request. Both methods MUST be implemented by DNS API resources.

POST requests to a DNS API resource including the DNS query in their message
bodies, with the Content-Type request header indicating their media type.

GET requests to a DNS API resource encode the DNS query in the URL itself,
after being encoded with base64url {{RFC4648}}.

POST-ed requests are generally smaller than their GET equivalents (as the DNS
query is not encoded), but using the GET method is friendlier to many HTTP
cache implementations.

A DNS API resource SHOULD respond with HTTP status code 415 (Unsupported Media
Type) upon receiving a media type it is unable to process in a POST request.

DNS API resources will generate successful responses (i.e., a 2xx status code;
see {{RFC7231}}, Section 6.3}}) to indicate a valid DNS response to the query
made in the HTTP request. This includes both success and failure responses,
from a DNS perspective.

For example, a DNS failure response such as SERVFAIL or NXDOMAIN will be sent
in a successful 2xx HTTP response, even though there was a failure at the DNS
layer.

Responses with non-successful HTTP status codes do not contain DNS answers to
the question in the corresponding request. Some non-successful HTTP responses
(e.g., redirects or authentication failures) could be used to help clients make
new requests to satisfy the original question.

DNS API resources can use the "Accept" request header field to select a
response format, based upon the client's preferences and the formats it
supports. All DNS API resources and DNS AP clients MUST support the
"application/dns-udpwireformat" ({{dnswire}}).

The media types that a DNS API resource responds with can provide varying
amounts of information. For example, one response type might include the
information from the DNS header bytes while another might omit it. The amount
and type of information that a media type gives is solely up to the format, and
not constrained by the DNS API resource.

Note that the DNS response for "application/dns-udpwireformat" in {{dnswire}}
can have one or more EDNS options, depending on the extension definition of the
extensions given in the DNS request.

## Examples

These examples use HTTP/2 style formatting from {{RFC7540}}.

These examples use a DNS API service with a URI Template of
"https://dnsserver.example.net/dns-query{?dns}" to resolve
IN A records.

The requests are represented as application/dns-udpwirefomat typed
bodies.

The first example request uses GET to request www.example.com

~~~~~
:method = GET
:scheme = https
:authority = dnsserver.example.net
:path = /dns-query?dns=AAABAAABAAAAAAAAA3d3dwdleGFtcGxlA2NvbQAAAQAB
accept = application/dns-udpwireformat
~~~~~

The same DNS query for www.example.com, using the POST method would be:

~~~~~
:method = POST
:scheme = https
:authority = dnsserver.example.net
:path = /dns-query
accept = application/dns-udpwireformat
content-type = application/dns-udpwireformat
content-length = 33

<33 bytes represented by the following hex encoding>
00 00 01 00 00 01 00 00  00 00 00 00 03 77 77 77
07 65 78 61 6d 70 6c 65  03 63 6f 6d 00 00 01 00
01
~~~~~

Finally, a GET based query for
a.62characterlabel-makes-base64url-distinct-from-standard-base64.example.com
is shown as an example to emphasize that the encoding alphabet of
base64url is different than regular base64 and that padding is omitted.

The DNS query is 94 bytes represented by the following hex encoding

~~~~~

00 00 01 00 00 01 00 00  00 00 00 00 01 61 3e 36
32 63 68 61 72 61 63 74  65 72 6c 61 62 65 6c 2d
6d 61 6b 65 73 2d 62 61  73 65 36 34 75 72 6c 2d
64 69 73 74 69 6e 63 74  2d 66 72 6f 6d 2d 73 74
61 6e 64 61 72 64 2d 62  61 73 65 36 34 07 65 78
61 6d 70 6c 65 03 63 6f  6d 00 00 01 00 01

:method = GET
:scheme = https
:authority = dnsserver.example.net
:path = /dns-query? (no space or CR)
        dns=AAABAAABAAAAAAAAAWE-NjJjaGFyYWN0ZXJsYWJl (no space or CR)
        bC1tYWtlcy1iYXNlNjR1cmwtZGlzdGluY3QtZnJvbS1z (no space or CR)
        dGFuZGFyZC1iYXNlNjQHZXhhbXBsZQNjb20AAAEAAQ
accept = application/dns-udpwireformat

~~~~~

This is an example response for a query for the IN A records for
"www.example.com" with recursion turned on. The response bears one
record with an address of 192.0.2.1 and a TTL of 128 seconds.

~~~~~
:status = 200
content-type = application/dns-udpwireformat
content-length = 64
cache-control = max-age=128

<64 bytes represented by the following hex encoding>
00 00 81 80 00 01 00 01  00 00 00 00 03 77 77 77
07 65 78 61 6d 70 6c 65  03 63 6f 6d 00 00 01 00
01 03 77 77 77 07 65 78  61 6d 70 6c 65 03 63 6f
6d 00 00 01 00 01 00 00  00 80 00 04 C0 00 02 01
~~~~~

## The DNS Wire Format {#dnswire}

The data payload is the DNS on-the-wire format defined in {{RFC1035}}. The
format is for DNS over UDP. Note that this is different than the wire format
used in {{RFC7858}}.

Also note that while {{RFC1035}} says "Messages carried by UDP are restricted
to 512 bytes", that was later updated by {{RFC6891}}, and this protocol allows
DNS on-the-wire format payloads of any size.

DNS API clients using the DNS wire format MAY have one or more EDNS
options {{RFC6891}} in the request.

The media type is "application/dns-udpwireformat".



# HTTP Considerations

This protocol MUST be used with the https scheme URI {{RFC7230}}.

## Interactions between HTTP and DNS Caching {#caching}

A DNS API client may utilize a hierarchy of caches that include both
HTTP and DNS specific caches. HTTP caches may be bypassed with
HTTP mechanisms such as the "Cache-Control no-store" directive; however
DNS caches do not have a similar mechanism.

A DOH response that was previously stored in an HTTP cache will
contain the {{RFC7234}} Age response header indicating the elapsed
time between when the entry was placed in the HTTP cache and the
current DOH response. DNS API clients should subtract this time from
the DNS TTL if they are re-sharing the information in a non HTTP
context (e.g., their own DNS cache) to determine the remaining time to
live of the DNS record.

HTTP revalidation (e.g., via If-None-Match request headers) of cached
DNS information may be of limited value to DOH as revalidation
provides only a bandwidth benefit and DNS transactions are normally
latency bound. Furthermore, the HTTP response headers that enable
revalidation (such as "Last-Modified" and "Etag") are often fairly
large when compared to the overall DNS response size, and have a
variable nature that creates constant pressure on the HTTP/2
compression dictionary {{RFC7541}}. Other types of DNS data, such as
zone transfers, may be larger and benefit more from revalidation. DNS
API resources may wish to consider whether providing these validation
enabling response headers is worthwhile.

The stale-while-revalidate and stale-if-error cache control directives may be
well suited to a DOH implementation when allowed by the DNS API resource's
policy. Those mechanisms allow a cache, at the server's discretion, to reuse a
response that is no longer fresh under some extenuating circumstances defined
in {{RFC5861}}.

All HTTP resources, including DNS API resources, need to consider cache
interaction when they generate responses that are not globally
valid. For instance, if a DNS API resource customized a response based
on the client's identity then it would not want to globally allow
reuse of that response. This could be accomplished through a variety
of HTTP techniques such as a Cache-Control: no store, or by using
the Vary response header; see {{RFC7234}}.

In order to maximize cache friendliness, DNS requests that include DNS ID
SHOULD use a DNS ID of 0. HTTP correlates requests and responses, thus
eliminating the need for the ID, and the use of a varying DNS ID can cause
semantically equivalent DNS queries to be cached separately.

The Answer section of a DNS response can contain zero or more RRsets. (RRsets
are defined in {{RFC7719}}.) According to {{RFC2181}}, each resource record in
an RRset has Time To Live (TTL) freshness information. Different RRsets in the
Answer section can have different TTLs, although it is only possible for the
HTTP response to have a single freshness lifetime. The HTTP response freshness
lifetime ({{RFC7234}} Section 4.2) should be coordinated with the RRset with
the smallest TTL in the Answer section of the response.

Specifically, the HTTP freshness lifetime SHOULD be set to expire at the same
time any of the DNS resource records in the Answer section reach a 0 TTL. The
response freshness lifetime MUST NOT be greater than that indicated by the DNS
resource record with the smallest TTL in the response.

If the DNS response has no records in the Answer section, and the DNS response
has an SOA record in the Authority section, the response freshness lifetime
MUST NOT be greater than the MINIMUM field from that SOA record. (See
{{RFC2308}}.) 

Otherwise, the HTTP response MUST set a freshness lifetime ({{RFC7234}} Section
4.2) of 0 by using a mechanism such as "Cache-Control: no-cache" ({{RFC7234}}
Section 5.2.1.4).

A DNS API client that receives a response without an explicit freshness
lifetime MUST NOT assign that response a heuristic freshness ({{RFC7234}}
Section 4.2.2.) greater than that indicated by the DNS Record with the smallest
TTL in the response.

## HTTP/2

The minimum version of HTTP used by DOH SHOULD be HTTP/2 {{RFC7540}}.

The messages in classic UDP based DNS {{RFC1035}} are inherently
unordered and have low overhead. A competitive HTTP transport needs to
support reordering, parallelism, priority, and header compression to
achieve similar performance. Those features were introduced to HTTP in
HTTP/2 {{RFC7540}}. Earlier versions of HTTP are capable of conveying
the semantic requirements of DOH but may result in very poor
performance for many uses cases.

DNS API clients can use HTTP/2 padding and compression in the same way that
other HTTP/2 clients use (or don't use) them.

## Server Push

Before using DOH response data for DNS resolution, the client MUST
establish that the HTTP request URI is a trusted service for DOH
queries. For HTTP requests initiated by the DNS API client this trust is
implicit in the selection of URI. For HTTP server push ({{RFC7540}}
Section 8.2) extra care must be taken to ensure that the pushed URI is
one that the client would have directed the same query to if the
client had initiated the request. This specification does not extend
DNS resolution privileges to URIs that are not recognized by the
client as trusted DNS API resources.

## Content Negotiation

In order to maximize interoperability, DNS API clients and DNS API
resources MUST support the "application/dns-udpwireformat" media
type. Other media types MAY be used as defined by HTTP Content
Negotiation ({{RFC7231}} Section 3.4).

# IANA Considerations {#iana}

## Registration of application/dns-udpwireformat Media Type

~~~~~
To: ietf-types@iana.org
Subject: Registration of MIME media type
         application/dns-udpwireformat

MIME media type name: application

MIME subtype name: dns-udpwireformat

Required parameters: n/a

Optional parameters:  original_transport
The "original_transport" parameter has two defined values,
"udp" and "tcp". This parameter is only expected to be used by
servers.

Encoding considerations: This is a binary format. The contents are a
DNS message as defined in RFC 1035. The format used here is for DNS
over UDP, which is the format defined in the diagrams in RFC 1035.

Security considerations:  The security considerations for carrying
this data are the same for carrying DNS without encryption.

Interoperability considerations:  None.

Published specification:  This document.

Applications that use this media type:
  Systems that want to exchange full DNS messages.

Additional information:

Magic number(s):  n/a

File extension(s):  n/a

Macintosh file type code(s):  n/a

Person & email address to contact for further information:
   Paul Hoffman, paul.hoffman@icann.org

Intended usage:  COMMON

Restrictions on usage:  n/a

Author:  Paul Hoffman, paul.hoffman@icann.org

Change controller:  IESG
~~~~~

# Security Considerations {#Security}

Running DNS over HTTPS relies on the security of the underlying
HTTP transport. This mitigates classic amplification
attacks for UDP-based DNS. Implementations utilizing HTTP/2 benefit from the TLS
profile defined in {{RFC7540}} Section 9.2.

Session level encryption has well known weaknesses with respect to
traffic analysis which might be particularly acute when dealing with
DNS queries.
HTTP/2 provides further advice about the use of compression
(Section 10.6 of {{RFC7540}}) and padding (Section 10.7 of {{RFC7540}}).

The HTTPS connection provides transport security for the interaction
between the DNS API resource and client, but does not inherently ensure
the authenticity of DNS data. A DNS API client may also perform full
DNSSEC validation of answers received from a DNS API resource or it may
choose to trust answers from a particular DNS API resource, much as a
DNS client might choose to trust answers from its recursive DNS
resolver. This capability might be affected by the response media
type.

{{caching}} describes the interaction of this protocol with HTTP
caching. An adversary that can control the cache used by the client
can affect that client's view of the DNS. This is no different
than the security implications of HTTP caching for other protocols
that use HTTP.

A HTTP server that is hosting both DNS API resources and "normal" web resources
is in a position to choose which DNS names it forces a
client to resolve (through its web service) and also be the one to
answer those queries (through its DNS API service). An untrusted
DNS API resource can thus easily cause damage by poisoning a client's
cache with names that the DNS API resource chooses to poison. A
client MUST NOT trust a DNS API resource simply because it was
discovered, or because the client was told to trust the DNS API
resource by an untrusted party. Instead, a client MUST only trust DNS
API resource that is configured as trustworthy.

A client can use DNS over HTTPS as one of multiple mechanisms to obtain DNS
data. If a client of this protocol encounters an HTTP error after sending
a DNS query, and then falls back to a different DNS retrieval mechanism,
doing so can weaken the privacy and authenticity expected by the user of the client.

# Operational Considerations

Local policy considerations and similar factors mean different DNS
servers may provide different results to the same query: for instance
in split DNS configurations {{RFC6950}}.  It logically follows that
the server which is queried can influence the end result.  Therefore a
client’s choice of DNS server may affect the responses it gets to its
queries.
For example, in the case of DNS64 {{RFC6147}}, the choice could affect
whether IPv6/IPv4 translation will work at all.

The HTTPS channel used by this specification establishes secure two
party communication between the DNS API client and the DNS API resource.
Filtering or inspection systems that rely on unsecured transport of
DNS will not function in a DNS over HTTPS environment.

Some HTTPS client implementations perform real time third party checks
of the revocation status of the certificates being used by TLS. If
this check is done as part of the DNS API resource connection procedure
and the check itself requires DNS resolution to connect to the third
party a deadlock can occur. The use of OCSP {{RFC6960}} servers or AIA
for CRL fetching ({{RFC5280}} Section 4.2.2.1) are examples of how
this deadlock can happen.  To mitigate the possibility of deadlock,
DNS API resources SHOULD NOT rely on DNS based references to external
resources in the TLS handshake. For OCSP the resource can bundle the
certificate status as part of the handshake using a mechanism
appropriate to the version of TLS, such as using {{RFC6066}} Section 8
for TLS version 1.2. AIA deadlocks can be avoided by providing
intermediate certificates that might otherwise be obtained through
additional requests.

A DNS API client may face a similar bootstrapping problem when the
HTTP request needs to resolve the hostname portion of the DNS
URI. Just as the address of a traditional DNS nameserver cannot be
originally determined from that same server, a DNS API client cannot use
its DNS API resource to initially resolve the server's host name into an
address. Alternative strategies a client might employ include making
the initial resolution part of the configuration, IP based URIs and
corresponding IP based certificates for HTTPS, or resolving the DNS
API resource's hostname via traditional DNS or another DNS API resource while
still authenticating the resulting connection via HTTPS.

HTTP {{RFC7230}} is a stateless application level protocol and
therefore DOH implementations do not provide stateful ordering
guarantees between different requests. DOH cannot be used as a
transport for other protocols that require strict ordering.

If a DNS API resource responds to a DNS API client with a DNS message that has
the TC (truncation) bit set in the header, that indicates that the DNS API
resource was not able to retrieve a full answer for the query and is providing
the best answer it could get. This protocol does not require that a DNS API
resource that cannot get an untruncated answer send back such an answer; it can
instead send back an HTTP error to indicate that it cannot give a useful answer.

This protocol does not define any use for the "original_transport" optional
parameter of the application/dns-udpwireformat media type.


# Acknowledgments

This work required a high level of cooperation between experts in
different technologies. Thank you
Ray Bellis,
Stephane Bortzmeyer,
Manu Bretelle,
Tony Finch,
Daniel Kahn Gilmor,
Olafur Guomundsson,
Wes Hardaker,
Rory Hewitt,
Joe Hildebrand,
David Lawrence,
Eliot Lear,
John Mattson,
Alex Mayrhofer,
Mark Nottingham,
Jim Reid,
Adam Roach,
Ben Schwartz,
Davey Song,
Daniel Stenberg,
Andrew Sullivan,
Martin Thomson,
and Sam Weiler.

--- back

# Previous Work on DNS over HTTP or in Other Formats

The following is an incomplete list of earlier work that related to DNS over HTTP/1 or representing DNS
data in other formats.

The list includes links to the tools.ietf.org site (because these documents
are all expired) and web sites of software.

* https://tools.ietf.org/html/draft-mohan-dns-query-xml

* https://tools.ietf.org/html/draft-daley-dnsxml

* https://tools.ietf.org/html/draft-dulaunoy-dnsop-passive-dns-cof

* https://tools.ietf.org/html/draft-bortzmeyer-dns-json

* https://www.nlnetlabs.nl/projects/dnssec-trigger/
